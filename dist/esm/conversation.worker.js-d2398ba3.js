(()=>{"use strict";const e=(e,n)=>{const s=globalThis[n];return s!=null&&e instanceof s};const n=s=>{if(s!=null){if(e(s,"ArrayBuffer")||e(s,"MessagePort")||e(s,"ImageBitmap")||e(s,"OffscreenCanvas")){return[s]}if(typeof s==="object"){if(s.constructor===Object){s=Object.values(s)}if(Array.isArray(s)){return s.flatMap(n)}return n(s.buffer)}}return[]};const s={};const t="stencil.conversation.worker.js";const o=t+".cb";addEventListener("message",(async({data:e})=>{if(e&&e[0]===t){let r=e[1];let c=e[2];let l=e[3];let a=0;let i=l.length;let f;let u;try{for(;a<i;a++){if(Array.isArray(l[a])&&l[a][0]===o){const e=l[a][1];l[a]=(...n)=>{postMessage([o,e,n])}}}f=await s[c](...l)}catch(e){f=null;if(e instanceof Error){u={isError:true,value:{message:e.message,name:e.name,stack:e.stack}}}else{u={isError:false,value:e}}f=undefined}const d=n(f);postMessage([t,r,f,u],d)}}));self.onmessage=function(e){const{action:n,payload:s}=e.data;if(n==="sendRequest"){const{url:e,token:n}=s;const t=`${e}?token=${encodeURIComponent(n)}`;const o=new EventSource(t);o.onmessage=function(e){self.postMessage({success:true,data:e.data})};o.onerror=function(e){self.postMessage({success:false,error:"Connection error"});o.close();console.error("EventSource error, connection closed.")};self.eventSource=o}else if(n==="closeConnection"){if(self.eventSource){self.eventSource.close();console.log("EventSource connection manually closed.")}}};console.log("This message is from web worker...")})();